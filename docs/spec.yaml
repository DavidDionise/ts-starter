openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
paths:
  /books:
    get:
      summary: List all books
      operationId: listBOoks
      tags:
        - books
      responses:
        200:
          description: An array of books
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"        
    post:
      summary: Create a book
      tags: 
        - books
      requestBody:
        description: Create a book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequest'
      responses:
        200:
          description: The newly created book
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"                
          
  # /pets/{petId}:
  #   get:
  #     summary: Info for a specific pet
  #     operationId: showPetById
  #     tags:
  #       - pets
  #     parameters:
  #       - name: petId
  #         in: path
  #         required: true
  #         description: The id of the pet to retrieve
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: Expected response to a valid request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Pets"
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
components:
  schemas:
    Book:
      required:
        - id
        - author
        - title
        - priceInCents
      properties:
        id:
          type: string
          example: ka98dya-as9duhv9ad9a-89a8syd9f-0abvia
        author:
          type: string
          example: David Dionise
        title:
          type: string
          example: How to Code in TypeScript
        priceInCents:
          type: integer
          example: 6000

    CreateBookRequest:
      required:
        - author
        - title
        - priceInCents
      properties:
        author:
          type: string
          example: David Dionise
        title:
          type: string
          example: How to Code in TypeScript
        priceInCents:
          type: integer
          example: 6000      

    Error:
      properties:
        message:
          type: string
          example: Bad Request